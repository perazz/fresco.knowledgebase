(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{110:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,b=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?i.a.createElement(b,r(r({ref:t},c),{},{components:n})):i.a.createElement(b,r({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var c=2;c<o;c++)l[c]=n[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},90:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(110)),l={id:"flame",title:"Model input",description:"Basics of flame propagation modelling."},r={unversionedId:"flame",id:"flame",isDocsHomePage:!1,title:"Model input",description:"Basics of flame propagation modelling.",source:"@site/docs/flame.md",slug:"/flame",permalink:"/fresco.knowledgebase/docs/flame",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/flame.md",version:"current",sidebar:"docs",previous:{title:"Gas-jet model",permalink:"/fresco.knowledgebase/docs/spray-gasjet"},next:{title:"Discrete Particle Ignition Kernel (DPIK)",permalink:"/fresco.knowledgebase/docs/flame-dpik"}},s=[{value:"Flame propagation modeling",id:"flame-propagation-modeling",children:[]},{value:"Flame model",id:"flame-model",children:[]},{value:"Kernel model",id:"kernel-model",children:[]},{value:"Transport equation",id:"transport-equation",children:[]},{value:"References",id:"references",children:[]}],c={toc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"flame-propagation-modeling"},"Flame propagation modeling"),Object(o.b)("p",null,"FRESCO's flame propagation modeling approach is described by an ",Object(o.b)("em",{parentName:"p"},"ignition")," model and by a ",Object(o.b)("em",{parentName:"p"},"flame")," model. The ignition model covers spark plug behavior and all aspects related to the early, laminar, kernel development stage; the flame model models the fully-developed flame front.\nSettings for both are found in the ",Object(o.b)("inlineCode",{parentName:"p"},"input.combustion.flame")," section of the Matlab input structure: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-{octave}"},"\n     flameModel: 0              % Flame propagation model switch \n    kernelModel: 0              % Ignition model switch \n         solver: [1\xd71 struct]   % FV Solver settings\n           GEqn: [1\xd71 struct]   % G-Equation specific settings\n      sparkPlug: [1\xd71 struct]   % Ignition model-specific settings \n          speed: [1\xd71 struct]   % Laminar flame speed\n         quench: [1\xd71 struct]   % Wall BC model \n\n")),Object(o.b)("p",null,"The corresponding flame model's ASCII input file structure is named ",Object(o.b)("inlineCode",{parentName:"p"},"itapeFlame"),": "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:'language-title="itapeFlame"'},'\nflameModel          none                ! flame model. "none", "G-Equation"\nkernelModel         none                ! kernel model. "none", "DPIK", "CEMA" \nexplicitFlux        no                  ! fluxing. "yes" explicit source; "no" subcycled momflx\nexplicitCompression yes                 ! compressibility. "yes" explicit, via Tb/Tu; "no" use ALE Phase B\nreinitSDF           yes                 ! reinitialization. "yes" use accurate SDF, "no" use approximate PDE\nunburntComposition  optimalMix          ! unburnt composition for chemistry. "ahead"=fully unburnt; "samecell"; "optimalMix"\ndiffuse             ENTHALPY            ! diffusion coefficient: "ENTHALPY" use Prt; "MASS" use Sct; "0.1234" use custom value\ncm4                 1.50000E+001        ! flame brush thickness timescale constant (cm4_uw, def=15.0)\nb1                  2.00000E+000        ! turbulent flame thickness parameter (b1, def=2.00)\nb2                  1.78000E+000        ! turbulent flame thickness parameter (b2, def=1.78)\nb3                  1.00000E+000        ! turbulent flame thickness parameter (b3, def=1.00)\nlFmult              1.00000E+000        ! laminar flame thickness diffusivity multiplier (def=1.0)\nEGR                 -1.00000E+000       ! charge dilution method: <0=composition-esimated; [0:1] user-defined fixed mass fraction (def=-1.0)\nquenchModel         NONE                ! wall quenching model: 0=NONE; 1=Suckart-Linse; 2=Ranasinghe-Malalasekera\nquenchPeclet        Westbrook           ! quenching distance model: [1.234] provide constant Peclet number; "Westbrook": PeQ=f(p,phi)\nchannelPts          1                   ! number of spark-channel particles\nr0                  5.00000E-002        ! kernel: initial radius [cm]\neta_eff             3.00000E-001        ! kernel: thermal discharge coefficient [-]\ntoFlame             TURBLENGTH    5.00  ! kernel->flame switch. "TURBLENGTH" (follow CM1), "NCELLS" (follow #) \nQspark              2.00000E+001        ! spark plug electrical power [W]           \n\n')),Object(o.b)("h2",{id:"flame-model"},"Flame model"),Object(o.b)("p",null,"Flame propagation can either be unactive, or follow the G-Equation model. This is simply set by switching: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-{octave}"},"    input.combustion.flame.flameModel = 0;  % no flame model\n    input.combustion.flame.flameModel = 1;  % G-Equation flame model\n")),Object(o.b)("p",null,"Instead of an integer switch, ",Object(o.b)("inlineCode",{parentName:"p"},"itapeFlame")," contains a name string, like in one of the following examples: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"flameModel none               ! no flame model active\nflameModel G-Equation         ! G-Equation flame propagation model\n")),Object(o.b)("p",null,"See the ",Object(o.b)("a",{parentName:"p",href:"flame-GEqn"},"G-Equation")," model page for more information on model-specific settings."),Object(o.b)("h2",{id:"kernel-model"},"Kernel model"),Object(o.b)("p",null,"Similarly, a kernel model can be of three types: unactive, spherical (",Object(o.b)("inlineCode",{parentName:"p"},"DPIK"),"), or ignition-based (",Object(o.b)("inlineCode",{parentName:"p"},"CEMA"),"). This is simply set by switching: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-{octave}"},"    input.combustion.flame.kernelModel = 0;  % no kernel model\n    input.combustion.flame.kernelModel = 1;  % DPIK kernel model \n    input.combustion.flame.kernelModel = 2;  % CEMA kernel model \n")),Object(o.b)("p",null,"Instead of an integer switch, ",Object(o.b)("inlineCode",{parentName:"p"},"itapeFlame")," contains a name string: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"kernelModel none            ! no kernel model active\nkernelModel DPIK            ! spherical ignition kernel model\nkernelModel CEMA            ! chemistry-based flame kernel model\n")),Object(o.b)("p",null,"See the ",Object(o.b)("a",{parentName:"p",href:"flame-dpik"},"DPIK")," and CEMA model pages for more information on model-specific settings."),Object(o.b)("h2",{id:"transport-equation"},"Transport equation"),Object(o.b)("p",null,"User has full control over the numerics the transport equation associated with the flame is being solved upon.\nSuch settings are part of the flame structure's ",Object(o.b)("inlineCode",{parentName:"p"},"solver")," component: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-{octave}"},"     solver.explicitFlux: 0;\n     solver.explicitCompression: 0;\n     solver.reinitSDF: 1;\n     solver.unburntComp: 'ahead';\n")),Object(o.b)("p",null,"The same are also found in ",Object(o.b)("inlineCode",{parentName:"p"},"itapeFlame")," as shown above.\nFlame propagation is solved using a standard ",Object(o.b)("a",{parentName:"p",href:"solver"},"transport equation")," for quantity ",Object(o.b)("inlineCode",{parentName:"p"},"G"),", which is the flame surface's implicit representation.\nIn each point of the computational domain, ",Object(o.b)("inlineCode",{parentName:"p"},"G")," represents the signed distance of that location to the flame surface."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"explicitFlux"),": ",Object(o.b)("inlineCode",{parentName:"p"},"G")," advection method: if on, flame advection is solved in a fully explicit fashion; otherwise, fresco's Courant-constrained sub-cycling advection method is employed. If using FRESCO's sub-cycling method, the advection equation is subject to the global simulation Courant constraint for advection, which is beneficial in high-speed configurations such as for a flame; and the divergence operator is Total Value Diminishing following the simulation's 1st/2nd order fluxing method.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"explicitCompression"),": defines compressibility method: if on, compressibility is solved explicitly and the turbulent flame speed ",Object(o.b)("inlineCode",{parentName:"p"},"sT")," is replaced by ",Object(o.b)("inlineCode",{parentName:"p"},"ro_u/ro_b*sT"),", i.e., scaled by the burnt/unburnt density ratio. Otherwise, FRESCO's standard compressible stage (\"Phase B\") is employed like any other transported quantity. Again, the default option is to use FRESCO's implicit method.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"reinitSDF"),": defines the field's reinitialization method. Reinitialization is important to enforce the distance field's property ",Object(o.b)("inlineCode",{parentName:"p"},"|grad(G)|=1"),". If not enforced, this property may be lost due to numerical issues. By turning this flag on, a highly-accurate point-surface SDF method is employed, which is based on a triangulated surface representation extracted from the field. Otherwise, a standard method employing a faster, but less accurate, iterative procedure with the Eikonal equation is used.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"unburntComp"),": defines how fuel composition and thermodynamic state should be evaluated ahead of the flame front. This is a critical input to the flame model, as these thermodynamic quantities are inputs to the local equivalence ratio, flame speed, turbulence state. When a computational cell contains a flame front and is hence partially burnt, it is impossible to reconstruct the split composition of its burnt/unburnt parts; so, guesses have to be made. "),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"ahead"),": pick unburnt state from the nearest ",Object(o.b)("em",{parentName:"p"},"fully unburnt")," cell ahead of the flame front. This choice will lead, in general, to ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"sameCell"),": use the same mixture composition as the bulk cell containing the flame front. ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"optimalMix"),": find an optimal composition blending the ",Object(o.b)("inlineCode",{parentName:"p"},"same-cell")," and the ",Object(o.b)("inlineCode",{parentName:"p"},"ahead")," compositions such that: 1) it is as close as possible to match the ",Object(o.b)("inlineCode",{parentName:"p"},"ahead")," composition, but 2) all of its components are present in the current cell, i.e., mass conservation is not violated when this composition is converted to combustion products. "))))),Object(o.b)("h2",{id:"references"},"References"),Object(o.b)("a",{id:"1",href:"https://www.sae.org/publications/technical-papers/content/2022-01-0406/"},"[1]"),"Federico Perini, Flavio D.F. Chuahy, Arpan Sircar, Derek Splitter, Rolf D. Reitz Advanced finite-volume numerics and source term assumptions for G-Equation modelling of propane/air flames. SAE Technical Paper 2022-01-0406, 2022.")}p.isMDXComponent=!0}}]);